# –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫
import telebot  # –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Telegram-–±–æ—Ç–∞
from telebot import types  # –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –∏ –¥—Ä—É–≥–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞

from datetime import datetime, timezone  # –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º

import requests  # –¥–ª—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫ API –ø–æ–≥–æ–¥—ã –∏ –≤–∞–ª—é—Ç)
from dotenv import load_dotenv  # –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env-—Ñ–∞–π–ª–∞
import os  # –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
from timezonefinder import (
    TimezoneFinder,
)  # –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
import ephem  # –¥–ª—è –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π (—Ñ–∞–∑–∞ –ª—É–Ω—ã, –≤–æ—Å—Ö–æ–¥/–∑–∞–∫–∞—Ç)
import pytz  # –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏

from deep_translator import GoogleTranslator
from database import create_db, save_user_data, get_user_city, get_user_coordinates

create_db()  # —Å–æ–∑–¥–∞—ë–º –ë–î –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
user_temp_data = {}  # –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º
bot = telebot.TeleBot(os.getenv("TELEGRAM_BOT_TOKEN"))
api = os.getenv("API")  # API-–∫–ª—é—á –¥–ª—è –ø–æ–≥–æ–¥—ã
api_convert = os.getenv("API_CONVERT")  # API-–∫–ª—é—á –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç
api_nasa = os.getenv("NASA_API")
amount = 0  # –°—É–º–º–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –∏ /help ‚Äî –≤—ã–≤–æ–¥–∏—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é


@bot.message_handler(commands=["start"])
def handle_location(message):
    if message.location:
        user_id = message.from_user.id
        latitude = message.location.latitude
        longitude = message.location.longitude
        user_temp_data[user_id] = {"latitude": latitude, "longitude": longitude}
        bot.send_message(
            message.chat.id,
            "üìç –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –±—ã–ª–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–∞.\n –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞",
        )
        bot.register_next_step_handler(message, get_city)
    else:
        bot.send_message(message.chat.id, "üìç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.")
        bot.register_next_step_handler(message, handle_location)


def get_city(message):
    user_id = message.from_user.id
    city_name = message.text.strip()

    if user_id in user_temp_data:
        latitude = user_temp_data[user_id]["latitude"]
        longitude = user_temp_data[user_id]["longitude"]

        save_user_data(user_id, latitude, longitude, city_name)

        bot.send_message(
            message.chat.id,
            f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:\n–ì–æ—Ä–æ–¥: {city_name}\n–®–∏—Ä–æ—Ç–∞: {latitude}\n–î–æ–ª–≥–æ—Ç–∞: {longitude}\n –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—è –≤–≤–µ–¥–∏\n /help",
        )
        user_temp_data.pop(user_id)
    else:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏.")


@bot.message_handler(commands=["settings"])
def setting_menu(message):
    markup_settings = types.InlineKeyboardMarkup(row_width=2)
    btn_city_change = types.InlineKeyboardButton(
        "–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥", callback_data="change_city"
    )
    btn_geo_change = types.InlineKeyboardButton(
        "–ò–∑–º–µ–Ω–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", callback_data="change_geo"
    )
    markup_settings.add(btn_city_change, btn_geo_change)

    bot.send_message(message.chat.id, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=markup_settings)


@bot.callback_query_handler(
    func=lambda call: call.data in ["change_city", "change_geo"]
)
def handle_settings_change(call):
    if call.data == "change_city":
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥")
        bot.register_next_step_handler(call.message, change_city_handler)
    elif call.data == "change_geo":
        bot.send_message(call.message.chat.id, "üìç –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é:")
        bot.register_next_step_handler(call.message, update_location_only)


def update_location_only(message):
    if message.location:
        user_id = message.from_user.id
        latitude = message.location.latitude
        longitude = message.location.longitude

        update_user_location(user_id, latitude, longitude)

        bot.send_message(message.chat.id, "‚úÖ –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    else:
        bot.send_message(
            message.chat.id, "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é."
        )
        bot.register_next_step_handler(message, update_location_only)


def change_city_handler(message):
    user_id = message.from_user.id
    city = message.text.strip()

    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ –ë–î
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    cursor.execute(
        "SELECT latitude, longitude FROM users WHERE user_id = ?", (user_id,)
    )
    result = cursor.fetchone()
    conn.close()

    if result:
        latitude, longitude = result
        save_user_data(user_id, latitude, longitude, city)
        bot.send_message(message.chat.id, f"‚úÖ –ì–æ—Ä–æ–¥ –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞: {city}")
    else:
        bot.send_message(
            message.chat.id, "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ /start."
        )


# üëá –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞
def update_user_location(user_id, latitude, longitude):
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    cursor.execute(
        """
        UPDATE users
        SET latitude = ?, longitude = ?
        WHERE user_id = ?
    """,
        (latitude, longitude, user_id),
    )
    conn.commit()
    conn.close()


@bot.message_handler(commands=["help"])
def help_menu(message):
    markup = types.InlineKeyboardMarkup(row_width=2)  # —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ 2 —Å—Ç–æ–ª–±—Ü–∞
    btn_weather = types.InlineKeyboardButton("üå§ –£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É", callback_data="weather")
    btn_convert = types.InlineKeyboardButton(
        "üí± –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç", callback_data="convert"
    )
    btn_astro = types.InlineKeyboardButton("üåå –ê—Å—Ç—Ä–∞–Ω–æ–º–∏—è", callback_data="astra")
    markup.add(btn_weather, btn_convert, btn_astro)
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–∫–∞–∑ –º–µ–Ω—é
    bot.send_message(
        message.chat.id,
        f"{message.from_user.first_name}! üëã\n–ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?\n –î–ª—è –æ—Ç–∫—Ä—ã—Ç–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤–≤–µ–¥–∏ /settings",
        reply_markup=markup,
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@bot.callback_query_handler(
    func=lambda call: call.data in ["weather", "convert", "astra"]
)
def handle_main_menu(call):
    bot.answer_callback_query(call.id)
    if call.data == "weather":
        get_weather(call)
    elif call.data == "convert":
        bot.send_message(call.message.chat.id, "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:")
        bot.register_next_step_handler(call.message, summa)
    elif call.data == "astra":
        astro_menu(call.message)


# –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ –º–µ–Ω—é
def astro_menu(message):
    markup_astro = types.InlineKeyboardMarkup(row_width=1)
    bth_moon_phase = types.InlineKeyboardButton(
        "üåë –£–∑–Ω–∞—Ç—å —Ñ–∞–∑—É –ª—É–Ω—ã", callback_data="phase_moon"
    )
    bth_sunrise_time = types.InlineKeyboardButton(
        "üåù üåõ –í—Ä–µ–º—è –≤–æ—Å—Ö–æ–¥–∞ –∏ –∑–∞–∫–∞—Ç–∞ –°–æ–ª–Ω—Ü–∞", callback_data="sunrise"
    )
    bth_astra_picture = types.InlineKeyboardButton(
        "üåÑ –ê—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ –¥–Ω—è", callback_data="astra_picture"
    )
    bth_position_planet = types.InlineKeyboardButton(
        "üåé –ö–∞–∫–∏–µ –ø–ª–∞–Ω–µ—Ç—ã –≤–∏–¥–Ω–æ —Å–µ–≥–æ–¥–Ω—è", callback_data="astra_position_planet"
    )

    markup_astro.add(
        bth_moon_phase, bth_sunrise_time, bth_astra_picture, bth_position_planet
    )
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ", reply_markup=markup_astro)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤ –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–º –º–µ–Ω—é
@bot.callback_query_handler(
    func=lambda call: call.data
    in ["phase_moon", "sunrise", "astra_picture", "astra_position_planet"]
)
def handle_astro_menu(call):
    user_id = call.message.chat.id
    lat, lon = get_user_coordinates(user_id)
    bot.answer_callback_query(call.id)
    if call.data == "phase_moon":
        print(lat, lon)
        phase = get_moon_phase(lat, lon)
        print(phase)
        bot.send_message(
            call.message.chat.id, f"–§–∞–∑–∞ –õ—É–Ω—ã –¥–ª—è –≤–∞—à–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è: {phase}"
        )
    elif call.data == "sunrise":
        sunrise, sunset = calculate_sun_times(lat, lon)
        bot.send_message(
            call.message.chat.id, f"üåÖ –í–æ—Å—Ö–æ–¥: {sunrise} | üåá –ó–∞–∫–∞—Ç: {sunset}"
        )
    elif call.data == "astra_picture":
        send_apod(call.message)
    elif call.data == "astra_position_planet":
        bot.send_message(call.message.chat.id, get_visible_planets(lat, lon))


# –§—É–Ω–∫—Ü–∏–∏ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é, –≤–æ–∑–º–æ–∂–Ω–æ –æ—Å—Ç–∞–ª–∏—Å—å –æ—Ç–ª–∞–¥–∫–∏)


# –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ–∞–∑—ã –ª—É–Ω—ã –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
def get_moon_phase(lat, lon):
    observer = ephem.Observer()
    observer.lat = str(lat)
    observer.lon = str(lon)
    observer.date = ephem.now()

    moon = ephem.Moon(observer)
    phase = moon.phase

    # –í—ã—á–∏—Å–ª—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –õ—É–Ω—ã –≤ –¥–Ω—è—Ö
    prev_new_moon = ephem.previous_new_moon(observer.date)
    age = observer.date - prev_new_moon  # –í–æ–∑—Ä–∞—Å—Ç –õ—É–Ω—ã –≤ –¥–Ω—è—Ö

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–∑—É –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É
    if age < 1.5:
        return "üåë –ù–æ–≤–æ–ª—É–Ω–∏–µ"
    elif age < 6.5:
        return "üåí –†–∞—Å—Ç—É—â–∏–π —Å–µ—Ä–ø"
    elif age < 13.5:
        return "üåì –ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å"
    elif age < 15.5:
        return "üåî –ü–æ—á—Ç–∏ –ø–æ–ª–Ω–æ–ª—É–Ω–∏–µ"
    elif age < 21:
        return "üåñ –£–±—ã–≤–∞—é—â–∞—è –õ—É–Ω–∞"
    elif age < 27:
        return "üåò –ü–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å"
    else:
        return "üåë –ù–æ–≤–æ–ª—É–Ω–∏–µ"


# –†–∞—Å—á—ë—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤–æ—Å—Ö–æ–¥–∞ –∏ –∑–∞–∫–∞—Ç–∞ —Å–æ–ª–Ω—Ü–∞ —Å —É—á—ë—Ç–æ–º –º–µ—Å—Ç–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
def calculate_sun_times(lat, lon):
    tf = TimezoneFinder()
    tz_name = tf.timezone_at(lng=lon, lat=lat)
    if not tz_name:
        tz_name = "UTC"

    local_tz = pytz.timezone(tz_name)

    observer = ephem.Observer()
    observer.lat = str(lat)
    observer.lon = str(lon)
    observer.date = datetime.utcnow()

    sunrise_utc = (
        observer.next_rising(ephem.Sun()).datetime().replace(tzinfo=timezone.utc)
    )
    sunset_utc = (
        observer.next_setting(ephem.Sun()).datetime().replace(tzinfo=timezone.utc)
    )

    sunrise_local = sunrise_utc.astimezone(local_tz)
    sunset_local = sunset_utc.astimezone(local_tz)

    return sunrise_local.strftime("%H:%M"), sunset_local.strftime("%H:%M")


import ephem
from datetime import datetime


def get_visible_planets(lat, lon):
    observer = ephem.Observer()
    observer.lat = str(lat)
    observer.lon = str(lon)
    observer.date = datetime.now(timezone.utc)

    planets = {
        "–ú–µ—Ä–∫—É—Ä–∏–π": ephem.Mercury(observer),
        "–í–µ–Ω–µ—Ä–∞": ephem.Venus(observer),
        "–ú–∞—Ä—Å": ephem.Mars(observer),
        "–Æ–ø–∏—Ç–µ—Ä": ephem.Jupiter(observer),
        "–°–∞—Ç—É—Ä–Ω": ephem.Saturn(observer),
        "–£—Ä–∞–Ω": ephem.Uranus(observer),
        "–ù–µ–ø—Ç—É–Ω": ephem.Neptune(observer),
    }

    visible = []
    for name, planet in planets.items():
        planet.compute(observer)
        alt_deg = planet.alt * 180 / ephem.pi  # –ø–µ—Ä–µ–≤–æ–¥ –≤ –≥—Ä–∞–¥—É—Å—ã
        if alt_deg > 0:
            visible.append(f"{name} (–≤—ã—Å–æ—Ç–∞: {alt_deg:.1f}¬∞)")

    if visible:
        msg = "üî≠ –°–µ–π—á–∞—Å –º–æ–∂–Ω–æ –Ω–∞–±–ª—é–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –ø–ª–∞–Ω–µ—Ç—ã:\n"
        msg += "\n".join(f"‚Ä¢ {p}" for p in visible)
    else:
        msg = "‚ùå –°–µ–π—á–∞—Å –Ω–∏ –æ–¥–Ω–∞ –ø–ª–∞–Ω–µ—Ç–∞ –Ω–µ –≤–∏–¥–Ω–∞ –Ω–∞–¥ –≥–æ—Ä–∏–∑–æ–Ω—Ç–æ–º."

    return msg


def send_apod(message):
    response = requests.get(f"https://api.nasa.gov/planetary/apod?api_key={api_nasa}")
    MAX_CAPTION_LENGTH = 1024
    if response.status_code == 200:
        data = response.json()
        title = data.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        explanation = data.get("explanation", "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è.")
        translate_explanation = translate_to_russian(explanation)
        caption_text = f"üî≠ {title}\n\n{translate_explanation}"
        media_url = data.get("url", "")
        media_type = data.get("media_type", "image")

        if media_type == "image" and len(caption_text) <= MAX_CAPTION_LENGTH:
            bot.send_photo(message.chat.id, media_url, caption=f"üî≠ {caption_text}")
        else:
            bot.send_message(
                message.chat.id,
                f"{title}\n\n{translate_explanation}\nüì∫ –í–∏–¥–µ–æ: {media_url}",
            )
    else:
        bot.send_message(message.chat.id, "üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç NASA.")


def translate_to_russian(text):
    new_text = GoogleTranslator(source="auto", target="ru").translate(text)
    return new_text


# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –≥–æ—Ä–æ–¥–∞
def get_weather(call):
    user_id = call.message.chat.id
    print(user_id)
    city = get_user_city(user_id)
    print(city)
    res = requests.get(
        f"https://api.openweathermap.org/data/2.5/weather?q={city}&appid={api}&units=metric&lang=ru"
    )
    if res.status_code == 200:
        data = res.json()
        temp = data["main"]["temp"]
        feels = data["main"]["feels_like"]
        description = data["weather"][0]["description"].capitalize()
        icon_code = data["weather"][0]["icon"]  # –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–º–æ–¥–∑–∏

        # –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–∫–æ–Ω–æ–∫ –ø–æ–≥–æ–¥–Ω—ã–º —ç–º–æ–¥–∑–∏
        emoji_map = {
            "01d": "‚òÄÔ∏è",
            "01n": "üåô",
            "02d": "üå§",
            "02n": "üå§",
            "03d": "‚òÅÔ∏è",
            "03n": "‚òÅÔ∏è",
            "04d": "‚òÅÔ∏è",
            "04n": "‚òÅÔ∏è",
            "09d": "üåß",
            "09n": "üåß",
            "10d": "üå¶",
            "10n": "üåß",
            "11d": "üå©",
            "11n": "üå©",
            "13d": "‚ùÑÔ∏è",
            "13n": "‚ùÑÔ∏è",
            "50d": "üå´",
            "50n": "üå´",
        }

        emoji = emoji_map.get(icon_code)
        time = datetime.now().strftime("%H:%M")

        bot.send_message(
            call.message.chat.id,
            f"{emoji} –ü–æ–≥–æ–¥–∞ –≤ {city.title()}:\n"
            f" {description}\n"
            f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels}¬∞C)\n"
            f"üïí –í—Ä–µ–º—è: {time}",
        )
    else:
        bot.send_message(call.message.chat.id, "‚ö†Ô∏è –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É–º–º—ã –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏ –≤—ã–±–æ—Ä –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã
def summa(message):
    global amount
    try:
        amount = float(message.text.strip())
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")
        bot.register_next_step_handler(message, summa)
        return

    if amount > 0:
        markup = types.InlineKeyboardMarkup(row_width=2)
        markup.add(
            types.InlineKeyboardButton("USD ‚Üí EUR", callback_data="USD/EUR"),
            types.InlineKeyboardButton("EUR ‚Üí USD", callback_data="EUR/USD"),
            types.InlineKeyboardButton("USD ‚Üí RUB", callback_data="USD/RUB"),
            types.InlineKeyboardButton("EUR ‚Üí RUB", callback_data="EUR/RUB"),
        )
        bot.send_message(
            message.chat.id, "üí± –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É:", reply_markup=markup
        )
    else:
        bot.send_message(message.chat.id, "‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.")
        bot.register_next_step_handler(message, summa)


# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ API –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç
@bot.callback_query_handler(func=lambda call: "/" in call.data)
def callback_convert(call):
    base, target = call.data.split("/")
    url = f"https://v6.exchangerate-api.com/v6/{api_convert}/pair/{base}/{target}/{amount}"
    response = requests.get(url)
    data = response.json()

    if data["result"] == "success":
        result = round(data["conversion_result"], 2)
        bot.send_message(
            call.message.chat.id, f"üí∏ {amount} {base} = {result} {target}"
        )
    else:
        bot.send_message(call.message.chat.id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç.")


import sqlite3


@bot.message_handler(commands=["show_users"])
def show_users(message):
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()

    cursor.execute("SELECT user_id, city, latitude, longitude FROM users")
    rows = cursor.fetchall()
    conn.close()

    if not rows:
        bot.send_message(message.chat.id, "üì≠ –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    text = "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:\n\n"
    for row in rows:
        uid, city, lat, lon = row
        text += f"ID: {uid}\n–ì–æ—Ä–æ–¥: {city}\n–®–∏—Ä–æ—Ç–∞: {lat}\n–î–æ–ª–≥–æ—Ç–∞: {lon}\n\n"

    # –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, —Ä–∞–∑–±–µ–π –µ–≥–æ –Ω–∞ —á–∞—Å—Ç–∏
    for i in range(0, len(text), 4000):  # —Ç–µ–ª–µ–≥–∞ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç ~4096 —Å–∏–º–≤–æ–ª–æ–≤
        bot.send_message(message.chat.id, text[i : i + 4000])


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
bot.polling(non_stop=True)
