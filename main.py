import telebot
from telebot import types
from datetime import datetime
import requests
import json
from dotenv import load_dotenv
import os

load_dotenv()

bot = telebot.TeleBot(os.getenv("TELEGRAM_BOT_TOKEN"))
api = os.getenv("API")
api_convert = os.getenv("API_CONVERT")
amount = 0


@bot.message_handler(commands=["start"])
def start(message):
    markup = types.InlineKeyboardMarkup(row_width=1)
    btn_weather = types.InlineKeyboardButton("üå§ –£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É", callback_data="weather")
    btn_convert = types.InlineKeyboardButton(
        "üí± –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç", callback_data="convert"
    )
    markup.add(btn_weather, btn_convert)
    bot.send_message(
        message.chat.id,
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã\n–ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
        reply_markup=markup,
    )


@bot.callback_query_handler(func=lambda call: call.data in ["weather", "convert"])
def handle_main_menu(call):
    if call.data == "weather":
        bot.send_message(call.message.chat.id, "üåÜ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")
        bot.register_next_step_handler(call.message, get_weather)
    elif call.data == "convert":
        bot.send_message(call.message.chat.id, "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:")
        bot.register_next_step_handler(call.message, summa)


def get_weather(message):
    city = message.text.strip().lower()
    res = requests.get(
        f"https://api.openweathermap.org/data/2.5/weather?q={city}&appid={api}&units=metric&lang=ru"
    )
    if res.status_code == 200:
        data = res.json()
        temp = data["main"]["temp"]
        feels = data["main"]["feels_like"]
        weather = data["weather"][0]["description"].capitalize()
        icon_code = data["weather"][0]["icon"]
        icon_url = f"https://openweathermap.org/img/wn/{icon_code}@2x.png"
        time = datetime.now().strftime("%H:%M")

        bot.send_message(
            message.chat.id,
            f"üìç –ü–æ–≥–æ–¥–∞ –≤ {city.title()}:\n"
            f"üå° {weather}\n"
            f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels}¬∞C)\n"
            f"üïí –í—Ä–µ–º—è: {time}",
        )
        bot.send_photo(message.chat.id, icon_url)
    else:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")


def summa(message):
    global amount
    try:
        amount = float(message.text.strip())
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")
        bot.register_next_step_handler(message, summa)
        return

    if amount > 0:
        markup = types.InlineKeyboardMarkup(row_width=2)
        markup.add(
            types.InlineKeyboardButton("USD ‚Üí EUR", callback_data="USD/EUR"),
            types.InlineKeyboardButton("EUR ‚Üí USD", callback_data="EUR/USD"),
            types.InlineKeyboardButton("USD ‚Üí RUB", callback_data="USD/RUB"),
            types.InlineKeyboardButton("EUR ‚Üí RUB", callback_data="EUR/RUB"),
        )
        bot.send_message(
            message.chat.id, "üí± –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É:", reply_markup=markup
        )
    else:
        bot.send_message(message.chat.id, "‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.")
        bot.register_next_step_handler(message, summa)


@bot.callback_query_handler(func=lambda call: "/" in call.data)
def callback_convert(call):
    base, target = call.data.split("/")
    url = f"https://v6.exchangerate-api.com/v6/{api_convert}/pair/{base}/{target}/{amount}"
    response = requests.get(url)
    data = response.json()

    if data["result"] == "success":
        result = round(data["conversion_result"], 2)
        bot.send_message(
            call.message.chat.id, f"üí∏ {amount} {base} = {result} {target}"
        )
    else:
        bot.send_message(call.message.chat.id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç.")


bot.polling(none_stop=True)
