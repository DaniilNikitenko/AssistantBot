# –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫
import telebot  # –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Telegram-–±–æ—Ç–∞
from telebot import types  # –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –∏ –¥—Ä—É–≥–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞

from datetime import datetime, timezone  # –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º

import requests  # –¥–ª—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫ API –ø–æ–≥–æ–¥—ã –∏ –≤–∞–ª—é—Ç)
from dotenv import load_dotenv  # –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env-—Ñ–∞–π–ª–∞

import os  # –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
from timezonefinder import (
    TimezoneFinder,
)  # –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
import ephem  # –¥–ª—è –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π (—Ñ–∞–∑–∞ –ª—É–Ω—ã, –≤–æ—Å—Ö–æ–¥/–∑–∞–∫–∞—Ç)
import pytz  # –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º
bot = telebot.TeleBot(os.getenv("TELEGRAM_BOT_TOKEN"))
api = os.getenv("API")  # API-–∫–ª—é—á –¥–ª—è –ø–æ–≥–æ–¥—ã
api_convert = os.getenv("API_CONVERT")  # API-–∫–ª—é—á –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç
amount = 0  # –°—É–º–º–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏

lat = 0  # –®–∏—Ä–æ—Ç–∞
lon = 0  # –î–æ–ª–≥–æ—Ç–∞
city = None


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –∏ /help ‚Äî –≤—ã–≤–æ–¥–∏—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é


@bot.message_handler(commands=["start"])
def get_location(message):
    if message.location:
        global lat, lon
        lat, lon = message.location.latitude, message.location.longitude
        bot.send_message(
            message.chat.id,
            "–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –±—ã–ª–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–∞.\n –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞",
        )
        bot.register_next_step_handler(message, get_city)
        print(lat, lon)
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.")
        bot.register_next_step_handler(message, get_location)


def get_city(message):
    global city
    city = message.text.strip().lower()
    help_menu(message)


@bot.message_handler(commands=["help"])
def help_menu(message):
    markup = types.InlineKeyboardMarkup(row_width=2)  # —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ 2 —Å—Ç–æ–ª–±—Ü–∞
    btn_weather = types.InlineKeyboardButton("üå§ –£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É", callback_data="weather")
    btn_convert = types.InlineKeyboardButton(
        "üí± –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç", callback_data="convert"
    )
    btn_astro = types.InlineKeyboardButton("üåå –ê—Å—Ç—Ä–∞–Ω–æ–º–∏—è", callback_data="astra")
    markup.add(btn_weather, btn_convert, btn_astro)
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–∫–∞–∑ –º–µ–Ω—é
    bot.send_message(
        message.chat.id,
        f"{message.from_user.first_name}! üëã\n–ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
        reply_markup=markup,
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@bot.callback_query_handler(
    func=lambda call: call.data in ["weather", "convert", "astra"]
)
def handle_main_menu(call):
    bot.answer_callback_query(call.id)
    if call.data == "weather":
        get_weather(call.message)
    elif call.data == "convert":
        bot.send_message(call.message.chat.id, "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:")
        bot.register_next_step_handler(call.message, summa)
    elif call.data == "astra":
        astro_menu(call.message)


# –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ –º–µ–Ω—é
def astro_menu(message):
    markup_astro = types.InlineKeyboardMarkup(row_width=2)
    bth_moon_phase = types.InlineKeyboardButton(
        "–£–∑–Ω–∞—Ç—å —Ñ–∞–∑—É –ª—É–Ω—ã", callback_data="phase_moon"
    )
    bth_sunrise_time = types.InlineKeyboardButton(
        "–í—Ä–µ–º—è –≤–æ—Å—Ö–æ–¥–∞ –∏ –∑–∞–∫–∞—Ç–∞ –°–æ–ª–Ω—Ü–∞", callback_data="sunrise"
    )

    markup_astro.add(bth_moon_phase, bth_sunrise_time)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ", reply_markup=markup_astro)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤ –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–º –º–µ–Ω—é
@bot.callback_query_handler(func=lambda call: call.data in ["phase_moon", "sunrise"])
def handle_astro_menu(call):
    bot.answer_callback_query(call.id)
    if call.data == "phase_moon":
        phase = get_moon_phase(lat, lon)
        bot.send_message(
            call.message.chat.id, f"–§–∞–∑–∞ –õ—É–Ω—ã –¥–ª—è –≤–∞—à–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è: {phase}"
        )
    elif call.data == "sunrise":
        sunrise, sunset = calculate_sun_times(lat, lon)
        bot.send_message(
            call.message.chat.id, f"üåÖ –í–æ—Å—Ö–æ–¥: {sunrise} | üåá –ó–∞–∫–∞—Ç: {sunset}"
        )


# –§—É–Ω–∫—Ü–∏–∏ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é, –≤–æ–∑–º–æ–∂–Ω–æ –æ—Å—Ç–∞–ª–∏—Å—å –æ—Ç–ª–∞–¥–∫–∏)
def get_phase_moon(message):
    phase = get_moon_phase(lat, lon)
    bot.send_message(message.chat.id, f"–§–∞–∑–∞ –õ—É–Ω—ã –¥–ª—è –≤–∞—à–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è:\n {phase}")


def get_sunrise_time(message):
    sunrise_time = sunrise_time(lat, lon)
    bot.send_message(
        message.chat.id, f"–í–æ—Å—Ö–æ–¥: {sunrise_time[0]}, –ó–∞–∫–∞—Ç: {sunrise_time[1]}"
    )


# –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ–∞–∑—ã –ª—É–Ω—ã –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
def get_moon_phase(lat, lon):
    global observer
    observer = ephem.Observer()
    observer.lat = str(lat)
    observer.lon = str(lon)
    moon = ephem.Moon(observer)
    phase = moon.phase  # –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 0 –¥–æ 100

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —á–∏—Å–ª–æ–≤—É—é —Ñ–∞–∑—É –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
    if phase < 1:
        return "üåë –ù–æ–≤–æ–ª—É–Ω–∏–µ"
    elif 1 <= phase < 50:
        return "üåí –†–∞—Å—Ç—É—â–∏–π –ø–æ–ª—É–º–µ—Å—è—Ü"
    elif phase == 50:
        return "üåï –ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ"
    elif 50 < phase < 99:
        return "üåñ –£–±—ã–≤–∞—é—â–∞—è –õ—É–Ω–∞"
    elif phase >= 99:
        return "üåò –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–ª—É–º–µ—Å—è—Ü"


# –†–∞—Å—á—ë—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤–æ—Å—Ö–æ–¥–∞ –∏ –∑–∞–∫–∞—Ç–∞ —Å–æ–ª–Ω—Ü–∞ —Å —É—á—ë—Ç–æ–º –º–µ—Å—Ç–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
def calculate_sun_times(lat, lon):
    tf = TimezoneFinder()
    tz_name = tf.timezone_at(lng=lon, lat=lat)
    if not tz_name:
        tz_name = "UTC"

    local_tz = pytz.timezone(tz_name)

    observer = ephem.Observer()
    observer.lat = str(lat)
    observer.lon = str(lon)
    observer.date = datetime.utcnow()

    sunrise_utc = (
        observer.next_rising(ephem.Sun()).datetime().replace(tzinfo=timezone.utc)
    )
    sunset_utc = (
        observer.next_setting(ephem.Sun()).datetime().replace(tzinfo=timezone.utc)
    )

    sunrise_local = sunrise_utc.astimezone(local_tz)
    sunset_local = sunset_utc.astimezone(local_tz)

    return sunrise_local.strftime("%H:%M"), sunset_local.strftime("%H:%M")


# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –≥–æ—Ä–æ–¥–∞
def get_weather(message):
    res = requests.get(
        f"https://api.openweathermap.org/data/2.5/weather?q={city}&appid={api}&units=metric&lang=ru"
    )
    if res.status_code == 200:
        data = res.json()
        temp = data["main"]["temp"]
        feels = data["main"]["feels_like"]
        description = data["weather"][0]["description"].capitalize()
        icon_code = data["weather"][0]["icon"]  # –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–º–æ–¥–∑–∏

        # –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–∫–æ–Ω–æ–∫ –ø–æ–≥–æ–¥–Ω—ã–º —ç–º–æ–¥–∑–∏
        emoji_map = {
            "01d": "‚òÄÔ∏è",
            "01n": "üåô",
            "02d": "üå§",
            "02n": "üå§",
            "03d": "‚òÅÔ∏è",
            "03n": "‚òÅÔ∏è",
            "04d": "‚òÅÔ∏è",
            "04n": "‚òÅÔ∏è",
            "09d": "üåß",
            "09n": "üåß",
            "10d": "üå¶",
            "10n": "üåß",
            "11d": "üå©",
            "11n": "üå©",
            "13d": "‚ùÑÔ∏è",
            "13n": "‚ùÑÔ∏è",
            "50d": "üå´",
            "50n": "üå´",
        }

        emoji = emoji_map.get(icon_code)
        time = datetime.now().strftime("%H:%M")

        bot.send_message(
            message.chat.id,
            f"{emoji} –ü–æ–≥–æ–¥–∞ –≤ {city.title()}:\n"
            f" {description}\n"
            f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels}¬∞C)\n"
            f"üïí –í—Ä–µ–º—è: {time}",
        )
    else:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É–º–º—ã –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏ –≤—ã–±–æ—Ä –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã
def summa(message):
    global amount
    try:
        amount = float(message.text.strip())
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")
        bot.register_next_step_handler(message, summa)
        return

    if amount > 0:
        markup = types.InlineKeyboardMarkup(row_width=2)
        markup.add(
            types.InlineKeyboardButton("USD ‚Üí EUR", callback_data="USD/EUR"),
            types.InlineKeyboardButton("EUR ‚Üí USD", callback_data="EUR/USD"),
            types.InlineKeyboardButton("USD ‚Üí RUB", callback_data="USD/RUB"),
            types.InlineKeyboardButton("EUR ‚Üí RUB", callback_data="EUR/RUB"),
        )
        bot.send_message(
            message.chat.id, "üí± –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É:", reply_markup=markup
        )
    else:
        bot.send_message(message.chat.id, "‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.")
        bot.register_next_step_handler(message, summa)


# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ API –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç
@bot.callback_query_handler(func=lambda call: "/" in call.data)
def callback_convert(call):
    base, target = call.data.split("/")
    url = f"https://v6.exchangerate-api.com/v6/{api_convert}/pair/{base}/{target}/{amount}"
    response = requests.get(url)
    data = response.json()

    if data["result"] == "success":
        result = round(data["conversion_result"], 2)
        bot.send_message(
            call.message.chat.id, f"üí∏ {amount} {base} = {result} {target}"
        )
    else:
        bot.send_message(call.message.chat.id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç.")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
bot.polling(none_stop=True)
